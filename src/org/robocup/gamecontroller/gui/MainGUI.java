/*
  Copyright (C) 2005 University Of New South Wales.
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.robocup.gamecontroller.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Iterator;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.robocup.gamecontroller.Constants;
import org.robocup.gamecontroller.data.GameState;
import org.robocup.gamecontroller.data.RobotState;
import org.robocup.gamecontroller.data.TeamInfo;
import org.robocup.gamecontroller.gui.PlayerButton.Mode;
import org.robocup.gamecontroller.net.Broadcast;
import org.robocup.gamecontroller.net.Listener;
import org.robocup.gamecontroller.rules.RuleBook;

/**
 * MainGUI is the starting class of the program.
 * The GUI is shown and it interacts with a RoboCupGameControlData and starts a Broadcast on a new thread to broadcast the RoboCupGameControlData structure.
 * 
 * The majority of the GUI code is generated by NetBeans 4.
 * 
 * @author willu@cse.unsw.edu.au shnl327@cse.unsw.edu.au
 * 
 *         Modified by: Tekin Mericli
 */
public class MainGUI extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	private static Logger logger = Logger.getLogger("org.robocup.gamecontroller.gui.maingui");

	public static final byte TEAM_0 = Constants.TEAM_BLUE;
	public static final byte TEAM_1 = Constants.TEAM_RED;

	// create a RoboCupGameControlData for use
	private GameState data;

	// instance of the GameController to use for the GUI
	// the GameController thread is started in main
	private Broadcast broadcast;

	// The color of the kickoff team
	// -1 = not set, Constants.TEAM_BLUE or Constants.TEAM_RED
	private byte halfKickoffTeam = -1;

	private Listener listener;
	private GuiHandler handler;

	// private int leagueType;
	private RuleBook rulebook;

	private String[] teamNames = new String[Constants.NUM_TEAMS];

	int numPlayers;

	// Should we beep?
	private boolean quiet = false;

	static final int SPECIAL_EVENT_NONE = 0;
	static final int SPECIAL_EVENT_READY = 1;
	static final int SPECIAL_EVENT_HALFTIME = 2;
	static final int SPECIAL_EVENT_TEAM1_TIMEOUT = 3;
	static final int SPECIAL_EVENT_TEAM2_TIMEOUT = 4;

	int special_event = SPECIAL_EVENT_NONE;

	int[] numPushing = new int[Constants.NUM_TEAMS];

	/** Creates new form GUI */
	// team numbers are given by GameController to initialize data structure
	// and broadcast address to initialize the Broadcast class
	public MainGUI(RuleBook rulebook, String[] teamNames, byte[] teamNumbers, String broadcastAddr, int port, int range, int numPlayers, boolean quiet) {
		this.rulebook = rulebook;
		numPlayers = rulebook.getNumPlayers();
		secs = rulebook.getTimeSeconds();

		this.teamNames = teamNames;
		this.numPlayers = numPlayers;
		this.quiet = quiet;
		if (this.numPlayers == -1) {
			this.numPlayers = Constants.NUM_PLAYERS_SPL;
		}

		// create the GameController and RoboCupGameControlData
		// based on the command line arguments
		data = new GameState(rulebook, teamNumbers);
		broadcast = new Broadcast(data, broadcastAddr, port, range, Constants.NETWORK_HEARTBEAT);

		// start the GameController thread
		Thread broadcastThread = new Thread(broadcast);
		broadcastThread.start();

		handler = new GuiHandler();
		handler.setGui(this);
		listener = new Listener(3838, handler);
		// listener = new Listener(port, handler);
		Thread t = new Thread(listener);
		t.start();

		initComponents();

		// start timer object
		new Timer(timerInterval, clock).start();

		lblTime.setSeconds(secs); // initialize clockface

		TitledBorder borderTeam1 = new TitledBorder(null, teamNames[TEAM_0] + " - #" + teamNumbers[TEAM_0], TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12));
		TitledBorder borderTeam2 = new TitledBorder(null, teamNames[TEAM_1] + " - #" + teamNumbers[TEAM_1], TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12));

		// initialize team panels with team names and numbers
		pnlTeam1.setBorder(borderTeam1);
		pnlTeam2.setBorder(borderTeam2);

		JPanel widestPanel = teamNames[TEAM_0].length() > teamNames[TEAM_1].length() ? pnlTeam1 : pnlTeam2;

		pnlTeam1.setPreferredSize(borderTeam1.getMinimumSize(widestPanel));
		pnlTeam2.setPreferredSize(borderTeam2.getMinimumSize(widestPanel));

		int windowWidth = Math.min(Math.max(1024, this.getWidth()), Toolkit.getDefaultToolkit().getScreenSize().width);
		this.setSize(windowWidth, this.getHeight());
		this.setLocationRelativeTo(null);

		// pack();
	}

	protected JToggleButton buildButton(String label, String toolTip) {
		JToggleButton button = new JToggleButton();
		button.setMargin(new Insets(2, 2, 2, 2));
		button.setText(label);
		button.setToolTipText(toolTip);
		return button;
	}

	private void initComponents() {
		setTitle(rulebook.getApplicationTitle());
		setName("frmMain");

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				close(evt);
			}
		});

		getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.X_AXIS));

		JPanel pnlLeft = new JPanel();
		getContentPane().add(pnlLeft);
		pnlLeft.setLayout(new BoxLayout(pnlLeft, BoxLayout.Y_AXIS));

		JPanel pnlKickOff = initKickOffPanel();
		pnlLeft.add(pnlKickOff);

		JPanel pnlMain = initGameStatePanel();
		pnlLeft.add(pnlMain);

		JPanel pnlDetails = initGameDetailsPanel();
		pnlLeft.add(pnlDetails);

		// Dimension minSize = new Dimension(5, 0);
		// Dimension prefSize = new Dimension(5, 0);
		// Dimension maxSize = new Dimension(Short.MAX_VALUE, Short.MAX_VALUE);
		// pnlLeft.add(new Box.Filler(minSize, prefSize, maxSize));

		pnlLeft.add(Box.createVerticalGlue());

		JPanel pnlPenalties = initPenaltyPanel();
		getContentPane().add(pnlPenalties);

		JPanel pnlTeams = initTeamPanels();
		getContentPane().add(pnlTeams);

		JPanel pnlRight = new JPanel();
		getContentPane().add(pnlRight);
		pnlRight.setLayout(new BoxLayout(pnlRight, BoxLayout.Y_AXIS));

		// JPanel pnlScore = initScorePanel();
		pnlScore = initScorePanel();
		pnlRight.add(pnlScore);

		JPanel pnlTime = initTimePanel();
		pnlRight.add(pnlTime);

		JPanel pnlSpecialEventTime = initSpecialEventTimePanel();
		pnlRight.add(pnlSpecialEventTime);

		pack();
	}

	protected JPanel initKickOffPanel() {
		JPanel pnlKickOff = new JPanel();
		pnlKickOff.setLayout(new GridLayout(0, 1, 5, 5));
		pnlKickOff.setBorder(new TitledBorder(null, "KickOff Team", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		kickOffButtons = new ButtonGroup();

		cmdTeam1KickOff = buildButton("<html><center>" + rulebook.getTeamName(0) + "<br/>KickOff</center></html>", "Click this button to select the " + rulebook.getTeamName(0) + " team for the next kick off.");
		cmdTeam1KickOff.setBackground(rulebook.getTeamColor(0));
		cmdTeam1KickOff.setSelected(true);
		cmdTeam1KickOff.addActionListener(new KickOffAdapter(this, TEAM_0));

		kickOffButtons.add(cmdTeam1KickOff);
		pnlKickOff.add(cmdTeam1KickOff);

		cmdTeam2KickOff = buildButton("<html><center>" + rulebook.getTeamName(1) + "<br/>KickOff</center></html>", "Click this button to select the " + rulebook.getTeamName(1) + " team for the next kick off.");
		cmdTeam2KickOff.setBackground(rulebook.getTeamColor(1));
		cmdTeam2KickOff.addActionListener(new KickOffAdapter(this, TEAM_1));

		kickOffButtons.add(cmdTeam2KickOff);
		pnlKickOff.add(cmdTeam2KickOff);

		return pnlKickOff;
	}

	protected JPanel initGameStatePanel() {
		JPanel pnlMain = new JPanel();
		pnlMain.setLayout(new GridLayout(0, 1, 5, 5));
		pnlMain.setBorder(new TitledBorder(null, "Game State", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		gameButtons = new ButtonGroup();

		cmdInitial = buildButton("Initial", "Click this button to set the game to the \"Initial\" state.");
		cmdInitial.setSelected(true);
		cmdInitial.addActionListener(new GameStateAdapter(this, Constants.STATE_INITIAL));
		gameButtons.add(cmdInitial);
		pnlMain.add(cmdInitial);

		cmdReady = buildButton("Ready", "Click this button to set the game to the \"Ready\" state.");
		cmdReady.addActionListener(new GameStateAdapter(this, Constants.STATE_READY));
		gameButtons.add(cmdReady);
		pnlMain.add(cmdReady);

		cmdSet = buildButton("Set", "Click this button to set the game to the \"Set\" state.");
		cmdSet.addActionListener(new GameStateAdapter(this, Constants.STATE_SET));
		gameButtons.add(cmdSet);
		pnlMain.add(cmdSet);

		cmdKickOff = buildButton("Play", "Click this button to set the game to the \"Playing\" state.");
		cmdKickOff.addActionListener(new GameStateAdapter(this, Constants.STATE_PLAYING));
		gameButtons.add(cmdKickOff);
		pnlMain.add(cmdKickOff);

		cmdFinish = buildButton("Finish", "Click this button to set the game to the \"Finish\" state.");
		cmdFinish.addActionListener(new GameStateAdapter(this, Constants.STATE_FINISHED));
		gameButtons.add(cmdFinish);
		pnlMain.add(cmdFinish);

		cmdTeam1DropIn = new JButton();
		cmdTeam1DropIn.setBackground(rulebook.getTeamColor(0));
		cmdTeam1DropIn.setText("<html><center>Out By<br/>" + rulebook.getTeamName(0) + "</center></html>");
		cmdTeam1DropIn.setToolTipText("Click when the " + rulebook.getTeamName(0) + " Team kicks the ball out");
		cmdTeam1DropIn.addActionListener(new DropInAdapter(this, TEAM_0));

		pnlMain.add(cmdTeam1DropIn);

		cmdTeam2DropIn = new JButton();
		cmdTeam2DropIn.setBackground(rulebook.getTeamColor(1));
		cmdTeam2DropIn.setText("<html><center>Out By<br/>" + rulebook.getTeamName(1) + "</center></html>");
		cmdTeam2DropIn.setToolTipText("Click when the " + rulebook.getTeamName(1) + " Team kicks the ball out");
		cmdTeam2DropIn.addActionListener(new DropInAdapter(this, TEAM_1));

		pnlMain.add(cmdTeam2DropIn);

		return pnlMain;
	}

	protected JPanel initGameDetailsPanel() {
		JPanel pnlDetails = new JPanel();
		pnlDetails.setLayout(new GridLayout(0, 1, 5, 5));
		pnlDetails.setBorder(new TitledBorder(null, "Game Details", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		chkAutoPause = new JCheckBox();
		chkAutoPause.setText("Auto Pause");
		chkAutoPause.setToolTipText("Check this option to automatically pause the clock when in \"Ready\" and \"Set\" states.");

		pnlDetails.add(chkAutoPause);

		return pnlDetails;
	}

	protected JPanel initPenaltyPanel() {
		JPanel pnlPenalties = new JPanel();
		pnlPenalties.setLayout(new GridLayout(0, 1, 5, 5));
		pnlPenalties.setBorder(new TitledBorder(null, "Penalties", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		penaltyButtons = new ButtonGroup();

		Iterator penalties = rulebook.getPenalties();
		int penalty = 0;
		while (penalties.hasNext()) {
			short code = ((Short) penalties.next()).shortValue();
			String name = rulebook.getPenaltyName(code);

			JToggleButton button = buildButton(name, "Sanction a \"" + name + "\" penalty to the selected players.");
			button.addActionListener(new PenaltyAdapter(this, code));
			penaltyButtons.add(button);
			pnlPenalties.add(button);
			penalty++;
		}

		cmdInvisible = new JToggleButton();
		cmdInvisible.setVisible(false);

		penaltyButtons.add(cmdInvisible);
		cmdInvisible.setSelected(true);

		return pnlPenalties;
	}

	protected JPanel initTeamPanels() {
		JPanel pnlTeams = new JPanel();
		pnlTeams.setLayout(new GridLayout(1, 2));

		pnlTeams.setBorder(new TitledBorder(null, "Teams", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		pnlTeam1 = new JPanel();
		pnlTeam1.setLayout(new GridLayout(0, 1, 5, 5));
		pnlTeam1.setBackground(rulebook.getTeamColor(TEAM_0));

		if (rulebook.getChangeGoals()) {
			JLabel lblTeam1 = new JLabel();
			lblTeam1.setText("Own Goal Color:");
			pnlTeam1.add(lblTeam1);

			goalColourTeam1 = new JComboBox();
			pnlTeam1.add(goalColourTeam1);
			goalColourTeam1.addItem(rulebook.getGoalName(TEAM_0));
			goalColourTeam1.addItem(rulebook.getGoalName(TEAM_1));
			goalColourTeam1.setSelectedIndex(TEAM_0);
		}

		cmdTeam1 = new PlayerButton[numPlayers];

		for (byte i = 0; i < numPlayers; i++) {
			int player = i + 1;

			cmdTeam1[i] = new PlayerButton(player, rulebook.getTeamName(TEAM_0));
			cmdTeam1[i].setMargin(new Insets(2, 5, 2, 5));
			cmdTeam1[i].addActionListener(new PlayerAdapter(this, TEAM_0, i));

			pnlTeam1.add(cmdTeam1[i]);
		}

		pnlTeams.add(pnlTeam1);

		pnlTeam2 = new JPanel();
		pnlTeam2.setLayout(new GridLayout(0, 1, 5, 5));
		pnlTeam2.setBackground(rulebook.getTeamColor(TEAM_1));

		if (rulebook.getChangeGoals()) {
			JLabel lblTeam2 = new JLabel();
			lblTeam2.setText("Own Goal Color:");
			pnlTeam2.add(lblTeam2);

			goalColourTeam2 = new JComboBox();
			pnlTeam2.add(goalColourTeam2);
			goalColourTeam2.addItem(rulebook.getGoalName(TEAM_0));
			goalColourTeam2.addItem(rulebook.getGoalName(TEAM_1));
			goalColourTeam2.setSelectedIndex(TEAM_1);
			goalColourTeam1.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					cmdChangeGoalColours(evt);
				}
			});
			goalColourTeam2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					cmdChangeGoalColours(evt);
				}
			});
		}

		cmdTeam2 = new PlayerButton[numPlayers];

		for (byte i = 0; i < numPlayers; i++) {
			int player = i + 1;

			cmdTeam2[i] = new PlayerButton(player, rulebook.getTeamName(TEAM_1));
			cmdTeam2[i].setMargin(new Insets(2, 5, 2, 5));
			cmdTeam2[i].addActionListener(new PlayerAdapter(this, TEAM_1, i));

			pnlTeam2.add(cmdTeam2[i]);
		}

		pnlTeams.add(pnlTeam2);

		// if there is a limit for number of pushing penalties to be kept track of
		if (rulebook.getUsePushingCounter()) {
			lblTeam1PushCount = new JLabel("0", SwingConstants.CENTER);
			lblTeam1PushCount.setFont(new Font("Dialog", 1, 50));
			lblTeam1PushCount.setToolTipText(teamNames[TEAM_0] + " push count.");
			lblTeam1PushCount.setBorder(new TitledBorder(null, "# pushes", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

			lblTeam2PushCount = new JLabel("0", SwingConstants.CENTER);
			lblTeam2PushCount.setFont(new Font("Dialog", 1, 50));
			lblTeam2PushCount.setToolTipText(teamNames[TEAM_1] + " push count.");
			lblTeam2PushCount.setBorder(new TitledBorder(null, "# pushes", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

			pnlTeam1.add(lblTeam1PushCount);
			pnlTeam2.add(lblTeam2PushCount);
		}

		return pnlTeams;
	}

	protected JPanel initScorePanel() {
		// load the team logos
		String[] imageTypes = { ".gif", ".jpg", ".png" };
		Image[] teamLogos = new Image[Constants.NUM_TEAMS];

		try {
			int width = 180;// this.getWidth() / 3;
			int height = 60;// this.getHeight() / 3;

			for (int i = 0; i < Constants.NUM_TEAMS; i++) {
				teamLogos[i] = null;

				for (int j = 0; j < imageTypes.length && teamLogos[i] == null; j++) {
					String resource = "/" + rulebook.getConfigDirectory() + "/" + data.getTeamNumber((byte) i) + imageTypes[j];
					File file = new File("config" + resource);
					if (file.exists()) {
						teamLogos[i] = ImageIO.read(file);
						break;
					}
				}

				if (teamLogos[i] == null) {
					for (int j = 0; j < imageTypes.length && teamLogos[i] == null; j++) {
						String resource = "/" + rulebook.getConfigDirectory() + "/" + data.getTeamNumber((byte) i) + imageTypes[j];
						InputStream in = getClass().getResourceAsStream(resource);
						if (in != null) {
							teamLogos[i] = ImageIO.read(in);
							break;
						}
					}
				}

				if (teamLogos[i] != null) {
					assert teamLogos[i].getWidth(this) > 0 && teamLogos[i].getHeight(this) > 0;

					if (width * teamLogos[i].getHeight(this) < height * teamLogos[i].getWidth(this)) {
						teamLogos[i] = teamLogos[i].getScaledInstance(width, -1, Image.SCALE_SMOOTH);
					} else {
						teamLogos[i] = teamLogos[i].getScaledInstance(-1, height, Image.SCALE_SMOOTH);
					}

					// teamLogos[i] = teamLogos[i].getScaledInstance(-1, height, Image.SCALE_SMOOTH);
				}
			}
		} catch (IOException e) {
			System.out.println("Error loading team logo images");
		}

		JPanel pnlScore = new JPanel();
		pnlScore.setLayout(new GridBagLayout());

		// JPanel pnlTeam1Score = new JPanel();
		pnlTeam1Score = new JPanel();
		pnlTeam1Score.setLayout(new GridBagLayout());

		// JPanel pnlTeam2Score = new JPanel();
		pnlTeam2Score = new JPanel();
		pnlTeam2Score.setLayout(new GridBagLayout());

		JPanel pnlTeam1ScoreUpDown = new JPanel();
		pnlTeam1ScoreUpDown.setLayout(new GridBagLayout());

		JPanel pnlTeam2ScoreUpDown = new JPanel();
		pnlTeam2ScoreUpDown.setLayout(new GridBagLayout());

		GridBagConstraints constraints = new GridBagConstraints();
		constraints.fill = GridBagConstraints.NONE;
		constraints.anchor = GridBagConstraints.SOUTH;

		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.weightx = 0.2;
		constraints.weighty = 0.5;
		constraints.gridheight = 1;
		constraints.insets = new Insets(2, 2, 2, 2);

		pnlScore.setBorder(new TitledBorder(null, "Score", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		lblTeam1Logo = new JLabel();
		if (teamLogos[0] != null) {
			team1Logo = new ImageIcon(teamLogos[0]);
			lblTeam1Logo.setIcon(team1Logo);
		}

		lblTeam1 = new JLabel();
		lblTeam1.setFont(new Font("Dialog", 1, 15));
		lblTeam1.setForeground(rulebook.getTeamColor(0));
		lblTeam1.setText(teamNames[0]);
		lblTeam1.setToolTipText(rulebook.getTeamName(0) + " team score.");

		pnlTeam1Score.add(lblTeam1Logo, constraints);
		constraints.gridy = 1;

		pnlTeam1Score.add(lblTeam1, constraints);

		lblTeam1Score = new JLabel();
		lblTeam1Score.setFont(new Font("Dialog", 1, 68));
		lblTeam1Score.setText("0");
		lblTeam1Score.setToolTipText(rulebook.getTeamName(0) + " team score.");

		constraints.gridy = 2;

		pnlTeam1Score.add(lblTeam1Score, constraints);

		cmdTeam1ScoreUp = new JButton();
		cmdTeam1ScoreUp.setText("+");
		cmdTeam1ScoreUp.setFont(new Font("Dialog", 0, 15));
		cmdTeam1ScoreUp.setToolTipText("Click to increment " + rulebook.getTeamName(0) + " score.");
		cmdTeam1ScoreUp.setMargin(new Insets(2, 5, 2, 5));
		cmdTeam1ScoreUp.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				cmdTeam1ScoreUp_clicked(evt);
			}
		});

		constraints.gridy = 3;

		pnlTeam1ScoreUpDown.add(cmdTeam1ScoreUp);

		cmdTeam1ScoreDown = new JButton();
		cmdTeam1ScoreDown.setText("-");
		cmdTeam1ScoreDown.setFont(new Font("Dialog", 0, 15));
		cmdTeam1ScoreDown.setToolTipText("Click to decrement " + rulebook.getTeamName(0) + " score.");
		cmdTeam1ScoreDown.setMargin(new Insets(2, 5, 2, 5));
		cmdTeam1ScoreDown.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cmdTeam1ScoreDown_clicked(evt);
			}
		});

		pnlTeam1ScoreUpDown.add(cmdTeam1ScoreDown);
		pnlTeam1Score.add(pnlTeam1ScoreUpDown, constraints);

		lblTeam2Logo = new JLabel();
		if (teamLogos[1] != null) {
			team2Logo = new ImageIcon(teamLogos[1]);
			lblTeam2Logo.setIcon(team2Logo);
		}

		lblTeam2 = new JLabel();
		lblTeam2.setFont(new Font("Dialog", 1, 15));
		lblTeam2.setForeground(rulebook.getTeamColor(1));
		lblTeam2.setText(teamNames[1]);
		lblTeam2.setToolTipText(rulebook.getTeamName(1) + " team score.");

		constraints.gridx = 1;
		constraints.gridy = 0;

		pnlTeam2Score.add(lblTeam2Logo, constraints);

		constraints.gridy = 1;

		pnlTeam2Score.add(lblTeam2, constraints);

		lblTeam2Score = new JLabel();
		lblTeam2Score.setFont(new Font("Dialog", 1, 68));
		lblTeam2Score.setText("0");
		lblTeam2Score.setToolTipText(rulebook.getTeamName(1) + " team score.");

		constraints.gridy = 2;

		pnlTeam2Score.add(lblTeam2Score, constraints);

		cmdTeam2ScoreUp = new JButton();
		cmdTeam2ScoreUp.setText("+");
		cmdTeam2ScoreUp.setFont(new Font("Dialog", 0, 15));
		cmdTeam2ScoreUp.setToolTipText("Click to increment " + rulebook.getTeamName(1) + " score.");
		cmdTeam2ScoreUp.setMargin(new Insets(2, 5, 2, 5));
		cmdTeam2ScoreUp.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				cmdTeam2ScoreUp_clicked(evt);
			}
		});

		constraints.gridy = 3;

		pnlTeam2ScoreUpDown.add(cmdTeam2ScoreUp);

		cmdTeam2ScoreDown = new JButton();
		cmdTeam2ScoreDown.setText("-");
		cmdTeam2ScoreDown.setFont(new Font("Dialog", 0, 15));
		cmdTeam2ScoreDown.setToolTipText("Click to decrement " + rulebook.getTeamName(1) + " score.");
		cmdTeam2ScoreDown.setMargin(new java.awt.Insets(2, 5, 2, 5));
		cmdTeam2ScoreDown.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				cmdTeam2ScoreDown_clicked(evt);
			}
		});

		pnlTeam2ScoreUpDown.add(cmdTeam2ScoreDown);
		pnlTeam2Score.add(pnlTeam2ScoreUpDown, constraints);

		constraints.gridy = 0;
		constraints.gridx = 0;

		pnlScore.add(pnlTeam1Score, constraints);

		constraints.gridx = 1;

		pnlScore.add(pnlTeam2Score, constraints);

		return pnlScore;
	}

	protected JPanel initTimePanel() {
		JPanel pnlTime = new JPanel();
		pnlTime.setLayout(new GridBagLayout());

		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridx = 0;
		constraints.gridy = 0;
		// constraints.weightx = 0.2;
		// constraints.weighty = 0.5;
		constraints.gridheight = 3;
		constraints.insets = new Insets(2, 2, 2, 2);

		pnlTime.setBorder(new TitledBorder(null, "Game Time", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		lblTime = new TimeTextField();
		lblTime.setFont(new Font("Dialog", 1, 36));
		lblTime.setSeconds(secs);
		lblTime.setToolTipText("Time remaining in half (unofficial). If you edit the time, press ENTER to commit the changes.");
		lblTime.setEnabled(false);
		lblTime.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent evt) {
				lblTimeKeyPressed(evt);
			}
		});

		pnlTime.add(lblTime, constraints);

		cmdTimeStart = new JButton();
		cmdTimeStart.setText("Start / Stop");
		cmdTimeStart.setToolTipText("Start / Stop the timer.");
		cmdTimeStart.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				cmdTimeStart_clicked(evt);
			}
		});

		constraints.gridx = 1;
		constraints.gridy = 0;
		constraints.gridheight = 1;

		pnlTime.add(cmdTimeStart, constraints);

		cmdTimeReset = new JButton();
		cmdTimeReset.setText("Reset");
		cmdTimeReset.setToolTipText("Reset the timer.");
		cmdTimeReset.setMargin(new Insets(2, 2, 2, 2));
		cmdTimeReset.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				cmdTimeReset_clicked(evt);
			}
		});

		constraints.gridy = 1;

		pnlTime.add(cmdTimeReset, constraints);

		cmbHalf = new JComboBox();
		// cmbHalf.setModel(new DefaultComboBoxModel(new String[] { "First Half", "Second Half", "Penalty Shoot A", "Penalty Shoot B" }));
		cmbHalf.setModel(new DefaultComboBoxModel(new String[] { "First Half", "Second Half", "<html>Penalty Shoot<br/>&nbsp;&nbsp;" + teamNames[TEAM_0] + "</html>", "<html>Penalty Shoot<br/>&nbsp;&nbsp;" + teamNames[TEAM_1] + "</html>" }));
		cmbHalf.setToolTipText("Select whether the game is in first half or second half. Changing this option will switch the teams around automatically.");
		cmbHalf.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cmbHalfActionPerformed(evt);
			}
		});

		constraints.gridy = 2;

		pnlTime.add(cmbHalf, constraints);

		return pnlTime;
	}

	protected JPanel initSpecialEventTimePanel() {
		pnlSpecialEventTime = new JPanel();
		pnlSpecialEventTime.setLayout(new GridBagLayout());

		pnlSpecialEventTime.setBorder(new TitledBorder(null, "Special Time : No current event", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		lblSpecialEventTime = new TimeTextField();
		lblSpecialEventTime.setFont(new Font("Dialog", 1, 36));
		lblSpecialEventTime.setSeconds(0);
		lblSpecialEventTime.setToolTipText("Time remaining in event");
		lblSpecialEventTime.setEnabled(false);
		lblSpecialEventTime.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent evt) {
				lblSpecialTimeKeyPressed(evt);
			}
		});

		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.gridheight = 3;
		constraints.weightx = 1.0;
		constraints.insets = new Insets(2, 2, 2, 2);
		pnlSpecialEventTime.add(lblSpecialEventTime, constraints);

		cmdTimeOutDone = new JButton();

		cmdTimeOutDone.setText("<html><center>Time Out<br/>Done</center></html>");
		cmdTimeOutDone.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cmdTimeOutDone_Selected(evt);
			}
		});

		constraints = new GridBagConstraints();
		constraints.gridx = 1;
		constraints.gridy = 0;
		constraints.weightx = 1.0;
		constraints.weighty = 1.0;
		constraints.insets = new Insets(2, 2, 2, 2);
		pnlSpecialEventTime.add(cmdTimeOutDone, constraints);

		cmdTeam1TimeOut = new JButton();
		cmdTeam1TimeOut.setBackground(rulebook.getTeamColor(0));
		cmdTeam1TimeOut.setText("<html><center>" + rulebook.getTeamName(0) + "<br/>Time Out</center></html>");
		cmdTeam1TimeOut.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cmdTeam1TimeOut_Selected(evt);
			}
		});

		constraints = new GridBagConstraints();
		constraints.gridx = 1;
		constraints.gridy = 1;
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.weightx = 1.0;
		constraints.weighty = 1.0;
		constraints.insets = new Insets(2, 2, 2, 2);
		pnlSpecialEventTime.add(cmdTeam1TimeOut, constraints);

		cmdTeam2TimeOut = new JButton();

		cmdTeam2TimeOut.setBackground(rulebook.getTeamColor(1));
		cmdTeam2TimeOut.setText("<html><center>" + rulebook.getTeamName(1) + "<br/>Time Out</center></html>");
		cmdTeam2TimeOut.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				cmdTeam2TimeOut_Selected(evt);
			}
		});

		constraints = new GridBagConstraints();
		constraints.gridx = 1;
		constraints.gridy = 2;
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.weightx = 1.0;
		constraints.weighty = 1.0;
		constraints.insets = new Insets(2, 2, 2, 2);
		pnlSpecialEventTime.add(cmdTeam2TimeOut, constraints);

		pnlSpecialEventTime.getAccessibleContext().setAccessibleName("Event Time : None");

		return pnlSpecialEventTime;
	}

	private void cmdTeam1TimeOut_Selected(ActionEvent evt) {
		if ((special_event != SPECIAL_EVENT_NONE) && (eventSecs >= rulebook.getTimeOutSeconds())) {
			System.err.println("Ignoring timeout - too much time left on other event");

			if (!quiet) {
				Toolkit.getDefaultToolkit().beep();
			}

			return;
		}
		eventSecs = rulebook.getTimeOutSeconds();
		special_event = SPECIAL_EVENT_TEAM1_TIMEOUT;
		startClock = false;
		data.setGameState(Constants.STATE_INITIAL);
		setEventTitle(rulebook.getTeamName(0) + " Time Out");
	}

	private void cmdTeam2TimeOut_Selected(ActionEvent evt) {
		if ((special_event != SPECIAL_EVENT_NONE) && (eventSecs >= rulebook.getTimeOutSeconds())) {
			System.err.println("Ignoring timeout - too much time left on other event");

			if (!quiet) {
				Toolkit.getDefaultToolkit().beep();
			}

			return;
		}
		eventSecs = rulebook.getTimeOutSeconds();
		special_event = SPECIAL_EVENT_TEAM2_TIMEOUT;
		startClock = false;
		data.setGameState(Constants.STATE_INITIAL);
		setEventTitle(rulebook.getTeamName(1) + " Time Out");
	}

	private void cmdTimeOutDone_Selected(ActionEvent evt) {
		eventSecs = 0;
		// note: most of the work is actually done by the timer when it realises
		// it has now hit 0
	}

	// when changing the clock time, the time needs to be applied to the data
	// structure and the GUI
	private void lblTimeKeyPressed(KeyEvent evt) {
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			logger.fine("commit time change");

			try {
				secs = parseTime(lblTime.getText());
			} catch (ParseException e) { // ignore -> no update
			}
			lblTime.setSeconds(secs);
		}
	}

	private void lblSpecialTimeKeyPressed(KeyEvent evt) {
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			logger.fine("commit event time change");

			try {
				eventSecs = parseTime(lblSpecialEventTime.getText());
			} catch (ParseException e) { // ignore -> no update
			}
			lblSpecialEventTime.setSeconds(eventSecs);
		}
	}

	private double parseTime(String str) throws ParseException {
		double m = 0, s = 0;
		String[] parts = str.split(":", 2);
		if (parts.length == 2) {
			m = new DecimalFormat("00").parse(parts[0]).doubleValue();
			s = new DecimalFormat("00.0").parse(parts[1]).doubleValue();
		} else if (parts.length == 1) {
			s = new DecimalFormat("00.0").parse(parts[0]).doubleValue();
		}
		return m * 60 + s;
	}

	private void cmbHalfActionPerformed(ActionEvent evt) {
		String half = (String) cmbHalf.getSelectedItem();

		boolean penaltyShoot = half.contains("Penalty");

		if (penaltyShoot) {
			data.setSecondaryGameState(Constants.STATE2_PENALTYSHOOT);
			// boolean shotA = half.endsWith("A");
			// boolean shotA = half.endsWith(teamNames[TEAM_0]);
			boolean shotA = cmbHalf.getSelectedIndex() == 2; // not a very elegant piece of code
			boolean blueKickoff = (halfKickoffTeam == Constants.TEAM_BLUE);
			boolean currentShotA = (data.getHalf() == blueKickoff);

			if (shotA != currentShotA) {
				switchTeams();
				data.setHalf(!data.getHalf());
			}
			data.setKickOffTeam(Constants.TEAM_RED);
			cmdTeam2KickOff.setSelected(true);
			cmdTimeReset_clicked(null);
		} else {
			boolean firstHalf = half.equals("First Half");
			if ((firstHalf != data.getHalf()) || (data.getSecondaryGameState() != Constants.STATE2_NORMAL)) {
				data.setSecondaryGameState(Constants.STATE2_NORMAL);

				if (firstHalf != data.getHalf()) {
					data.setHalf(firstHalf);
					switchTeams();
				}

				if (halfKickoffTeam != -1) {
					data.setKickOffTeam(halfKickoffTeam);
					if (halfKickoffTeam == TEAM_0) {
						cmdTeam1KickOff.setSelected(true);
					} else {
						cmdTeam2KickOff.setSelected(true);
					}
				}

				cmdTimeReset_clicked(null);
			}
		}
	}

	// need to change the team numbers, colours, and scores around when the
	// halves are changed
	private void switchTeams() {
		ImageIcon tempLogo = (ImageIcon) lblTeam1Logo.getIcon();
		lblTeam1Logo.setIcon(lblTeam2Logo.getIcon());
		lblTeam2Logo.setIcon(tempLogo);

		byte tempTeam = data.getTeamNumber(TEAM_0);
		byte tempScore = data.getScore(TEAM_0);
		String tempName = teamNames[TEAM_0];
		Color tempColor = lblTeam1.getForeground();
		byte tempTeamColour = data.getTeamColour(TEAM_0);

		// data.setTeamColour(TEAM_0, data.getTeamColour(TEAM_1));
		// data.setTeamColour(TEAM_1, tempTeamColour);

		// swap the teams in variables
		data.setTeamNumber(TEAM_0, data.getTeamNumber(TEAM_1));
		data.setTeamNumber(TEAM_1, tempTeam);
		data.setScore(TEAM_0, data.getScore(TEAM_1));
		data.setScore(TEAM_1, tempScore);

		teamNames[TEAM_0] = teamNames[TEAM_1];
		teamNames[TEAM_1] = tempName;

		// change the team numbers in the panel borders
		pnlTeam1.setBorder(new TitledBorder(null, teamNames[TEAM_0] + " - #" + data.getTeamNumber(TEAM_0), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));
		pnlTeam2.setBorder(new TitledBorder(null, teamNames[TEAM_1] + " - #" + data.getTeamNumber(TEAM_1), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Dialog", 1, 12)));

		// change the scores
		lblTeam1Score.setText("" + data.getScore(TEAM_0));
		lblTeam2Score.setText("" + data.getScore(TEAM_1));

		// System.out.println("Team0: " + data.getScore(TEAM_0) + " Team1: " + data.getScore(TEAM_1));

		lblTeam1.setForeground(rulebook.getTeamColor(TEAM_0));
		lblTeam2.setForeground(rulebook.getTeamColor(TEAM_1));
		lblTeam1.setText(teamNames[TEAM_0]);
		lblTeam2.setText(teamNames[TEAM_1]);

		for (int i = 0; i < numPlayers; i++) {
			cmdTeam1[i].resetPlayerSeen();
			cmdTeam2[i].resetPlayerSeen();
		}

		if (rulebook.getUsePushingCounter()) {
			rulebook.resetPushingCounter();

			lblTeam1PushCount.setText("" + rulebook.getPushingCounter(TEAM_0) + "");
			lblTeam2PushCount.setText("" + rulebook.getPushingCounter(TEAM_1) + "");

			numPushing[TEAM_0] = 0;
			numPushing[TEAM_1] = 0;
		}

		// reset the drop in time and team
		data.resetDropIn();

		// Unpenalize all robots, even the ejected ones
		unpenaliseAll(true);

		// System.out.println("Team0: number: " + data.getTeamNumber(TEAM_0) + " score: " + data.getScore(TEAM_0) + " Team1: number: " + data.getTeamNumber(TEAM_1) + " score: " + data.getScore(TEAM_1));

		// pack();
	}

	/***************************************************************************
	 * 
	 * Unpenalise buttons
	 * 
	 ***************************************************************************/

	// unpenalise the specified player
	public void unpenalisePlayer(byte team, byte player) {
		logger.fine("Clicked on unpenalise (Team: " + team + ", Player: " + player);

		PlayerButton button = (team == TEAM_0) ? cmdTeam1[player] : cmdTeam2[player];
		button.setPenalty(Constants.PENALTY_NONE, 0);

		data.setPenalty(team, player, Constants.PENALTY_NONE);

		if (team == TEAM_0) {
			team1Countdown[player] = 0;
		} else {
			team2Countdown[player] = 0;
		}
	}

	// wrapper for GUIUnpenalised to unpenalise all GUI elements
	private void unpenaliseAll(boolean includeEjected) {
		for (byte team = 0; team < Constants.NUM_TEAMS; team++) {
			for (byte player = 0; player < numPlayers; player++) {
				if (includeEjected || team == TEAM_0 && team1Countdown[player] != -1 || team == TEAM_1 && team2Countdown[player] != -1) {
					unpenalisePlayer(team, player);
					data.resetPenalty(team, player);
				}
			}
		}
		// data.resetPenalties();
	}

	// reset the clock
	private void cmdTimeReset_clicked(MouseEvent evt) {
		if (data.getSecondaryGameState() == Constants.STATE2_PENALTYSHOOT) {
			secs = rulebook.getPenaltyShootSeconds();
		} else {
			secs = rulebook.getTimeSeconds();
		}

		lblTime.setSeconds(secs);
	}

	// start/pause the clock
	private void cmdTimeStart_clicked(MouseEvent evt) {
		startClock = !startClock;
		cmbHalf.setEnabled(!startClock); // only enable changing of halves when
		// the clock is paused
	}

	/***************************************************************************
	 * 
	 * Code to modify the scores
	 * 
	 **************************************************************************/
	// events for the up/down score buttons. Need to concat "" since setText
	// only accepts strings, not ints
	// 1) count up/down score
	// 2) set the score in the data structure
	// 3) update the score on the GUI
	// 4) change kick off teams in GUI
	// 5) change kick off teams in data structure
	// 6) change state to "ready" if necessary (in GUI and data structure)
	private void cmdTeam1ScoreDown_clicked(ActionEvent evt) {
		byte team1Score = data.getScore(TEAM_0);
		if (team1Score > 0) {
			team1Score--;
		}
		data.setScore(TEAM_0, team1Score);
		lblTeam1Score.setText("" + team1Score);
	}

	private void cmdTeam1ScoreUp_clicked(MouseEvent evt) {
		byte team1Score = data.getScore(TEAM_0);
		team1Score++;
		data.setScore(TEAM_0, team1Score);
		lblTeam1Score.setText("" + team1Score);

		String half = (String) cmbHalf.getSelectedItem();

		if (half == "First Half") {
			cmdTeam2KickOff.setSelected(true);
		} else {
			cmdTeam1KickOff.setSelected(true);
		}

		data.setKickOffTeam(TEAM_1);

		unpenaliseAll(false);
		data.setGameState(Constants.STATE_READY);
		cmdReady.setSelected(true);

		setEventTitle("Ready");
		eventSecs = rulebook.getReadySeconds();
		special_event = SPECIAL_EVENT_READY;
	}

	private void cmdTeam2ScoreDown_clicked(MouseEvent evt) {
		byte team2Score = data.getScore(TEAM_1);
		if (team2Score > 0) {
			team2Score--;
		}
		data.setScore(TEAM_1, team2Score);
		lblTeam2Score.setText("" + team2Score);
	}

	private void cmdTeam2ScoreUp_clicked(MouseEvent evt) {
		byte team2Score = data.getScore(TEAM_1);
		team2Score++;
		data.setScore(TEAM_1, team2Score);
		lblTeam2Score.setText("" + team2Score);

		String half = (String) cmbHalf.getSelectedItem();

		if (half == "First Half") {
			cmdTeam1KickOff.setSelected(true);
		} else {
			cmdTeam2KickOff.setSelected(true);
		}

		data.setKickOffTeam(TEAM_0);

		unpenaliseAll(false);
		data.setGameState(Constants.STATE_READY);
		cmdReady.setSelected(true);

		setEventTitle("Ready");
		eventSecs = rulebook.getReadySeconds();
		special_event = SPECIAL_EVENT_READY;
	}

	/***************************************************************************
	 * 
	 * Applies the selected penalty / player combination to the data structure
	 * 
	 **************************************************************************/

	protected short selectedPenalty = Constants.PENALTY_NONE;
	protected int selectedPlayerTeam = TEAM_0;
	protected int selectedPlayerNumber = -1;

	// this function is called by the player/penalty button clicks
	// it applies the selected penalty to the selected player(s)
	private void applyPenalty(short team, short player, short code) {
		short time = rulebook.getPenaltyTime(code);

		if (team == TEAM_0) {
			logger.info("Applying " + rulebook.getPenaltyName(code) + " to" + rulebook.getTeamName(0) + " " + player);
			data.setPenalty(TEAM_0, (byte) player, code);
			team1Countdown[player] = time;

			if (rulebook.getUsePushingCounter() && code == Constants.PENALTY_SPL_PLAYER_PUSHING && rulebook.getPushingCounter(TEAM_0) == rulebook.getPushingThreshold(numPushing[TEAM_0])) {
				team1Countdown[player] = -1;
				numPushing[TEAM_0]++;

				if (numPushing[TEAM_0] >= numPlayers - 1) {
					numPushing[TEAM_0]--;
				}
			}
		} else {
			logger.info("Applying " + rulebook.getPenaltyName(code) + " to" + rulebook.getTeamName(1) + " " + player);
			data.setPenalty(TEAM_1, (byte) player, code);
			team2Countdown[player] = time;

			if (rulebook.getUsePushingCounter() && code == Constants.PENALTY_SPL_PLAYER_PUSHING && rulebook.getPushingCounter(TEAM_1) == rulebook.getPushingThreshold(numPushing[TEAM_1])) {
				team2Countdown[player] = -1;
				numPushing[TEAM_1]++;

				if (numPushing[TEAM_1] >= numPlayers - 1) {
					numPushing[TEAM_1]--;
				}
			}
		}

		if (rulebook.getUsePushingCounter() && code == Constants.PENALTY_SPL_PLAYER_PUSHING) {
			rulebook.incrementPushingCounter((byte) team);

			lblTeam1PushCount.setText("" + rulebook.getPushingCounter(TEAM_0) + "");
			lblTeam2PushCount.setText("" + rulebook.getPushingCounter(TEAM_1) + "");
		}

		// System.out.println("usePushingCounter: " + rulebook.getUsePushingCounter() + " code: " + code + " team1 push: " + rulebook.getPushingCounter(TEAM_0) + " team2 push: " + rulebook.getPushingCounter(TEAM_1));

		unselectPenalty(); // clear all selections after a penalty is given
		updatePenaltyButtons();
	}

	// unselects everything in the GUI for a penalty
	private void unselectPenalty() {
		selectedPenalty = Constants.PENALTY_NONE;
		cmdInvisible.setSelected(true); // don't select any penalty
		for (int i = 0; i < numPlayers; i++) {
			cmdTeam1[i].setSelected(false);
			cmdTeam2[i].setSelected(false);
		}
	}

	// Player/Penalty button clicks

	public void cmdPlayerClicked(int team, int player) {
		logger.fine("Clicked on " + rulebook.getTeamName(team) + " " + player);

		PlayerButton button = team == TEAM_0 ? cmdTeam1[player] : cmdTeam2[player];

		if (button.mode == Mode.modeNORMAL) {
			if (selectedPenalty != Constants.PENALTY_NONE) {
				applyPenalty((short) team, (short) player, selectedPenalty);
				button.mode = Mode.modeUNPENALIZE;
			} else {
				if (selectedPlayerTeam != team || selectedPlayerNumber != player) {
					if (selectedPlayerNumber != -1) {
						PlayerButton prevButton = selectedPlayerTeam == TEAM_0 ? cmdTeam1[selectedPlayerNumber] : cmdTeam2[selectedPlayerNumber];
						prevButton.setSelected(false);
					}
					selectedPlayerTeam = team;
					selectedPlayerNumber = player;
				} else {
					button.setSelected(false);
					selectedPlayerTeam = TEAM_0;
					selectedPlayerNumber = -1;
				}
			}
		} else {
			unpenalisePlayer((byte) team, (byte) player);
			button.setSelected(false);
		}
	}

	public void penalty_clicked(short code) {
		logger.fine("Clicked on a penalty");

		short selectedPlayer = 0;
		short selectedTeam = TEAM_0;
		boolean playerSelected = false;
		for (byte i = 0; i < numPlayers; i++) {
			if (cmdTeam1[i].isSelected()) {
				selectedPlayer = i;
				selectedTeam = TEAM_0;
				playerSelected = true;
				break;
			}
			if (cmdTeam2[i].isSelected()) {
				selectedPlayer = i;
				selectedTeam = TEAM_1;
				playerSelected = true;
				break;
			}
		}

		if (playerSelected) {
			applyPenalty(selectedTeam, selectedPlayer, code);
		} else {
			if (selectedPenalty != code) {
				selectedPenalty = code;
			} else {
				cmdInvisible.setSelected(true);
				selectedPenalty = Constants.PENALTY_NONE;
			}
		}
	}

	public void cmdChangeGoalColours(ActionEvent evt) {
		JComboBox source = (evt.getSource() == goalColourTeam1) ? goalColourTeam1 : goalColourTeam2;
		JComboBox other = (evt.getSource() == goalColourTeam1) ? goalColourTeam2 : goalColourTeam1;

		int srcGoal = source.getSelectedIndex();
		other.setSelectedIndex((srcGoal == 0) ? 1 : 0);

		data.setGoalColour(TEAM_0, (goalColourTeam1.getSelectedIndex() == 0) ? Constants.GOAL_BLUE : Constants.GOAL_YELLOW);
		data.setGoalColour(TEAM_1, (goalColourTeam2.getSelectedIndex() == 0) ? Constants.GOAL_BLUE : Constants.GOAL_YELLOW);
	}

	public void setEventTitle() {
		setEventTitle(null);
	}

	public void setEventTitle(String title) {
		if (title == null) {
			title = "No current event";
		}
		((TitledBorder) pnlSpecialEventTime.getBorder()).setTitle("Special Time : " + title);
		pnlSpecialEventTime.repaint(1000);
	}

	// Game Button clicks, these update the data structure and put the game into
	// a specified state, some of these states also reset all penalties

	public void setGameState(byte state) {
		data.setGameState(state);

		unpenaliseAll(state == Constants.STATE_FINISHED);

		if (state == Constants.STATE_PLAYING) {
			startClock = true;
			broadcast.setBurst(true);
			if (halfKickoffTeam == -1) {
				halfKickoffTeam = data.getKickOffTeam();
			}
		} else if (state == Constants.STATE_READY) {
			eventSecs = rulebook.getReadySeconds();
			special_event = SPECIAL_EVENT_READY;
			setEventTitle("Ready");
		} else if (state == Constants.STATE_FINISHED) {
			startClock = false;

			if ("First Half".equals((String) cmbHalf.getSelectedItem())) {
				setEventTitle("Half-time");
				eventSecs = rulebook.getHalfTimeSeconds();
				special_event = SPECIAL_EVENT_HALFTIME;
			}
		}
	}

	public void setKickOff(byte team) {
		logger.fine("Clicked on " + rulebook.getTeamName(team) + " Kick Off");
		data.setKickOffTeam(team);
	}

	public void setDropIn(byte team) {
		logger.fine("Clicked on " + rulebook.getTeamName(team) + " Drop In");
		data.setDropInTeam(team);
	}

	private void close(WindowEvent evt) {
		logger.fine("GUI closing");
		broadcast.socketCleanup();
	}

	/*******************************************************************************
	 * 
	 * A timer to time the penalty countdown and the clock
	 * 
	 *******************************************************************************/
	private static final double oneSecond = 1000; // oneSecond in milliseconds
	private static final int timerInterval = 100; // interval of clock event in
	// milliseconds

	// initial clock values
	private double secs = 0;

	// initial event clock values
	private double eventSecs = 0;

	// flags set by clock buttons to start/stop it
	private boolean startClock = false;

	// call other methods that need the time
	private ActionListener clock = new ActionListener() {
		public void actionPerformed(ActionEvent evt) {
			updateClock(); // update GUI clock
			updateEventClock();
			updatePlayerButtons();
			updatePenaltyCountDown(); // update penalty button countdowns
			updateEstimatedSecs(); // update secs remaining in struct
			data.updateDropInTime(); // update drop in team/time
		}
	};

	// updates the number of seconds remaining in the half
	// also indicates whether overtime has occurred using true/false
	private void updateEstimatedSecs() {
		if (secs >= 0) {
			data.setEstimatedSecs((int) Math.floor(secs), false);
		} else {
			data.setEstimatedSecs(0, true);
		}
	}

	// these arrays hold the penalty countdown values for each player
	private double[] team1Countdown = new double[Constants.MAX_NUM_PLAYERS];
	private double[] team2Countdown = new double[Constants.MAX_NUM_PLAYERS];

	private void updatePlayerButtons() {
		double diff = timerInterval / oneSecond;
		for (int i = 0; i < numPlayers; i++) {
			cmdTeam1[i].updateLastSeen(diff);
			cmdTeam2[i].updateLastSeen(diff);
		}
	}

	// update any penalty countdowns in both the data structure and the GUI
	private void updatePenaltyCountDown() {
		double diff = timerInterval / oneSecond;
		for (int i = 0; i < numPlayers; i++) {
			if (team1Countdown[i] != -1) { // not ejected
				if (team1Countdown[i] > diff) {
					team1Countdown[i] -= diff;
				} else {
					team1Countdown[i] = 0;
				}
			}
			if (team2Countdown[i] != -1) { // not ejected
				if (team2Countdown[i] > diff) {
					team2Countdown[i] -= diff;
				} else {
					team2Countdown[i] = 0;
				}
			}
		}
		updatePenaltyButtons();
	}

	private void updatePenaltyButtons() {
		for (byte i = 0; i < numPlayers; i++) {
			cmdTeam1[i].setPenalty(data.getPenalty(TEAM_0, i), team1Countdown[i]);
			cmdTeam2[i].setPenalty(data.getPenalty(TEAM_1, i), team2Countdown[i]);

			data.setSecsTillUnpenalised(TEAM_0, i, (short) (team1Countdown[i] == -1 ? data.getEstimatedSecs() : team1Countdown[i]));
			data.setSecsTillUnpenalised(TEAM_1, i, (short) (team2Countdown[i] == -1 ? data.getEstimatedSecs() : team2Countdown[i]));
		}
	}

	private void updateEventClock() {
		if (special_event == SPECIAL_EVENT_NONE) {
			return;
		}

		double diff = timerInterval / oneSecond;

		eventSecs -= diff;
		if ((special_event == SPECIAL_EVENT_TEAM1_TIMEOUT) || (special_event == SPECIAL_EVENT_TEAM2_TIMEOUT)) {
			if (eventSecs < 0) {
				special_event = SPECIAL_EVENT_READY;
				gameButtons.setSelected(cmdReady.getModel(), true);
				data.setGameState(Constants.STATE_READY);
				unpenaliseAll(false);
				setEventTitle("Ready");
				eventSecs = rulebook.getReadySeconds();
				startClock = true; // start the clock here - will be stopped
				// again later if chkAutoPause is on
			}
		} else if ((special_event == SPECIAL_EVENT_READY) || (data.getGameState() == Constants.STATE_READY)) {
			if (special_event != SPECIAL_EVENT_READY) {
				System.err.println("Weirdness in MainGUI.updateEventClock(): special_event should be READY");
			}
			if (data.getGameState() != Constants.STATE_READY) {
				setEventTitle(null);
				special_event = SPECIAL_EVENT_NONE;
				eventSecs = 0;
			} else if (eventSecs <= 0) {
				logger.info("Automatic switch to Set");
				gameButtons.setSelected(cmdSet.getModel(), true);
				data.setGameState(Constants.STATE_SET);
				unpenaliseAll(false);
				setEventTitle(null);
				special_event = SPECIAL_EVENT_NONE;
				eventSecs = 0;
			}
		} else if (special_event == SPECIAL_EVENT_HALFTIME) {
			if (Math.abs(eventSecs - rulebook.getHalfTimeSeconds() / 2) < 0.001) {
				cmbHalf.setSelectedIndex(1);
				gameButtons.setSelected(cmdInitial.getModel(), true);
				data.setGameState(Constants.STATE_INITIAL);
			}
			if (eventSecs < 0) {
				special_event = SPECIAL_EVENT_NONE;
				startClock = false;
			}
		} else {
			System.err.println("Unknown event type in MainGUI.updateEventClock(): " + special_event + " - ignoring.");
			special_event = SPECIAL_EVENT_NONE;
			setEventTitle(null);
			eventSecs = 0;
		}

		lblSpecialEventTime.setSeconds(eventSecs);
	}

	// count down the clock
	private void updateClock() {
		// the clock stops if auto pause is enabled and the game is in the
		// "Ready" or "Set" states
		if ((data.getGameState() == Constants.STATE_READY || data.getGameState() == Constants.STATE_SET) && chkAutoPause.isSelected()) {
			startClock = false;
		}

		cmbHalf.setEnabled(!startClock);
		lblTime.setEnabled(!startClock);

		if (startClock) {
			double diff = timerInterval / oneSecond;
			secs -= diff;
			lblTime.setSeconds(secs);

			if (!quiet) {
				if (secs >= 0 && secs <= 10 && Math.abs(secs - Math.floor(secs)) < diff) {
					Toolkit.getDefaultToolkit().beep();
				}
			}
		}
	}

	public void updateRobot(RobotState state) {
		short teamID = state.getTeamId();
		short robotID = state.getRobotId();
		int message = state.getMessage();
		byte team;

		System.out.println("received message from " + teamID + "/" + robotID + " : " + message);

		if (teamID == data.getTeamNumber(TEAM_0)) {
			// cmdTeam1[state.getRobotId()].setPlayerSeen();
			team = TEAM_0;
		} else if (teamID == data.getTeamNumber(TEAM_1)) {
			// cmdTeam2[state.getRobotId()].setPlayerSeen();
			team = TEAM_1;
		} else {
			System.out.println("Message from unknown team " + teamID);
			return;
		}

		switch (message) {
			case Constants.GAMECONTROLLER_RETURN_MSG_MAN_PENALISE: // robot has been manually penalised
				applyPenalty(team, robotID, Constants.PENALTY_MANUAL);
				break;
			case Constants.GAMECONTROLLER_RETURN_MSG_MAN_UNPENALISE: // robot has been manually unpenalised
				unpenalisePlayer(team, (byte) robotID);
				break;
			default:
				System.out.println("Unknown message, " + message + ", from player " + robotID + " on team " + teamID);

				break;
		}
	}

	private JCheckBox chkAutoPause;
	private JComboBox cmbHalf;

	protected JComboBox goalColourTeam1;
	protected PlayerButton[] cmdTeam1;

	protected JComboBox goalColourTeam2;
	protected PlayerButton[] cmdTeam2;

	private JButton cmdTeam1DropIn;
	private JToggleButton cmdTeam1KickOff;
	private JButton cmdTeam1ScoreDown;
	private JButton cmdTeam1ScoreUp;

	private JToggleButton cmdInitial;
	private JToggleButton cmdReady;
	private JToggleButton cmdSet;
	private JToggleButton cmdKickOff;
	private JToggleButton cmdFinish;

	private ButtonGroup penaltyButtons;
	private JToggleButton cmdInvisible;

	private JButton cmdTeam2DropIn;
	private JToggleButton cmdTeam2KickOff;
	private JButton cmdTeam2ScoreDown;
	private JButton cmdTeam2ScoreUp;

	private JButton cmdTimeReset;
	private JButton cmdTimeStart;
	private ButtonGroup gameButtons;
	private ButtonGroup kickOffButtons;

	private JLabel lblTeam1Score;
	private JLabel lblTeam1;
	private JLabel lblTeam1Logo;
	private JLabel lblTeam2Score;
	private JLabel lblTeam2;
	private JLabel lblTeam2Logo;
	private JLabel lblTeam1PushCount;
	private JLabel lblTeam2PushCount;
	private TimeTextField lblTime;
	private TimeTextField lblSpecialEventTime;

	private JButton cmdTeam1TimeOut;
	private JButton cmdTeam2TimeOut;
	private JButton cmdTimeOutDone;

	private JPanel pnlSpecialEventTime;
	private JPanel pnlTeam1;
	private JPanel pnlTeam2;
	private JPanel pnlScore;
	private JPanel pnlTeam1Score;
	private JPanel pnlTeam2Score;

	private ImageIcon team1Logo;
	private ImageIcon team2Logo;

}
